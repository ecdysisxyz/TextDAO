// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class TextSaved extends ethereum.Event {
  get params(): TextSaved__Params {
    return new TextSaved__Params(this);
  }
}

export class TextSaved__Params {
  _event: TextSaved;

  constructor(event: TextSaved) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get metadataURIs(): Array<string> {
    return this._event.parameters[1].value.toStringArray();
  }
}

export class SaveTextProtected extends ethereum.SmartContract {
  static bind(address: Address): SaveTextProtected {
    return new SaveTextProtected("SaveTextProtected", address);
  }

  saveText(pid: BigInt, textId: BigInt, metadataURIs: Array<string>): boolean {
    let result = super.call(
      "saveText",
      "saveText(uint256,uint256,string[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(pid),
        ethereum.Value.fromUnsignedBigInt(textId),
        ethereum.Value.fromStringArray(metadataURIs),
      ],
    );

    return result[0].toBoolean();
  }

  try_saveText(
    pid: BigInt,
    textId: BigInt,
    metadataURIs: Array<string>,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "saveText",
      "saveText(uint256,uint256,string[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(pid),
        ethereum.Value.fromUnsignedBigInt(textId),
        ethereum.Value.fromStringArray(metadataURIs),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class SaveTextCall extends ethereum.Call {
  get inputs(): SaveTextCall__Inputs {
    return new SaveTextCall__Inputs(this);
  }

  get outputs(): SaveTextCall__Outputs {
    return new SaveTextCall__Outputs(this);
  }
}

export class SaveTextCall__Inputs {
  _call: SaveTextCall;

  constructor(call: SaveTextCall) {
    this._call = call;
  }

  get pid(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get textId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get metadataURIs(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }
}

export class SaveTextCall__Outputs {
  _call: SaveTextCall;

  constructor(call: SaveTextCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
